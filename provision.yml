---
- name: Create Azure Ansible Lab
  hosts: localhost
  connection: local
  gather_facts: false
  vars: 
    azure_client_id: "{{ lookup('env', 'AZURE_CLIENT_ID')}}"
    azure_tenant: "{{ lookup('env', 'AZURE_TENANT')}}"
    azure_subscription_id: "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID')}}"
    azure_secret: "{{ lookup('env', 'AZURE_SECRET')}}"
    ansible_python_interpreter: "{{ lookup('env', 'PYTHON_EXEC')}}"

  pre_tasks:
    - name: Do we have our Azure Credentials
      assert:
        { that: "{{ item}} != ''" }
      with_items:
        - azure_client_id
        - azure_tenant
        - azure_subscription_id
        - azure_secret 

  tasks:
    - name: Standup Azure
      include_tasks: standup_azure.yml
      tags:
        - standup-azure
    - name: Create CNAME entry for enterpriseregistration
      azure_rm_dnsrecordset:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        record_mode: "purge"
        record_type: "CNAME"
        relative_name: "enterpriseregistration"
        zone_name: "{{ sso_dns_domain }}"
        records:
          - entry: "adfs.{{ sso_dns_domain }}"
      tags:
        - standup-azure
   
    - name: Create keys and csr
      shell: "{{ hostvars[inventory_hostname].playbook_dir }}/files/letsencrypt/gen_keys_csrs.sh chdir={{ hostvars[inventory_hostname].playbook_dir }}/files/letsencrypt"
      tags:
        - prep-certificate

    - name: Make sure we have an account on letsencrypt
      acme_account:
        account_key_src: "{{ letsencrypt_account_key_src }}"
        state: present
        acme_directory: "{{ letsencrypt_acme_directory }}"
        terms_agreed: yes 
        acme_version: 2
      register: acme_account_return
      tags:
        - prep-certificate
        
    - name: Register certificates with let's encrypt
      include_tasks: "{{ item }}"
      with_items:
        - "create_adfs_certificates.yml" 
        - "create_rhsso_certificates.yml"
      tags:
        - prep-certificate
    
    - name: Create Windows VM's
      include_tasks: create_windows_machine.yml
      with_items:
        - "ad" 
        - "adfs"
      tags:
        - create-windows-vm
       
    - name: Create RHEL VM's
      include_tasks: create_rhel_machine.yml
      with_items:
        - "rhsso"
      tags:
        - create-rhel-vm
  
    - name: Refresh the inventory
      meta: refresh_inventory

- name: Setup AD
  hosts: "advm" 
  roles:
    - active-directory

  pre_tasks:
    - name: Change administrator password
      win_user:
        name: "administrator"
        password: "{{ password }}"

  tasks:
    - name: Create Windows Groups
      win_domain_group:
          name: "{{ item.name }}"
          scope: "domainlocal"
          state: present
      loop: "{{ windows_groups }}"

  
    - name: Create Windows Users
      win_domain_user:
        name: "{{ item.name }}"
        firstname: "{{ item.firstname }}"
        surname: "{{ item.lastname }}"
        password: "{{ item.password }}"
        groups: "{{ item.groups }}"
        state: "present"
      loop: "{{ windows_users }}"

    - name: Upload GSMA Setup powershell
      win_template:
          src: "advm/adfs_gsma_setup.ps1.j2" # required. Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.
          dest: 'c:\adfs_gsma_setup.ps1' # required. Location to render the template to on the remote machine.
          force: yes # not required. If C(yes), will replace the remote file when contents are different from the source.,If C(no), the file will only be transferred if the destination does not exist.
      register: result_upload_gsma_setup_ps1
    - name: Execute GSMA Setup powershell
      win_shell:  'c:\adfs_gsma_setup.ps1'
      when: result_upload_gsma_setup_ps1 is changed

# - name: Update the virtual network by using the advm
#   hosts: localhost
#   connection: local
#   gather_facts: false
  
#   vars: 
#     azure_client_id: "{{ lookup('env', 'AZURE_CLIENT_ID')}}"
#     azure_tenant: "{{ lookup('env', 'AZURE_TENANT')}}"
#     azure_subscription_id: "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID')}}"
#     azure_secret: "{{ lookup('env', 'AZURE_SECRET')}}"
#     ansible_python_interpreter: "{{ lookup('env', 'PYTHON_EXEC')}}"
    
#   tasks:
#     - name: Update the vn
#       azure_rm_virtualnetwork:
#         client_id: "{{ azure_client_id }}"
#         tenant: "{{ azure_tenant }}"
#         subscription_id: "{{ azure_subscription_id }}"
#         secret: "{{ azure_secret }}"
#         resource_group: "{{ res_group }}"
#         name: "ssonet"
#         address_prefixes: "{{virtual_network_cidr}}"
#         dns_servers: 
#           - "192.168.33.10"

- name: Setup ADFS
  hosts: "adfsvm" 
 
  # pre_tasks:
  #   - name: Renew dhcp to take advantage of the new dns
  #     win_command: "ipconfig /renew"
      
  #   - name: Register machine to domain
  #     win_domain_membership:
  #       dns_domain_name: "{{ sso_dns_domain }}"
  #       hostname: "{{ inventory_hostname }}"
  #       domain_admin_user: "administrator@{{ sso_dns_domain }}"
  #       domain_admin_password: "{{ password }}"
  #       state: domain
  #     register: domain_state

  #   - name: Reboot if required
  #     win_reboot:
  #     when: domain_state.reboot_required
  tasks:
    - name: Create working directories
      win_file:
          path: "{{ item }}" 
          state: directory 
      loop:
          - "{{ adfs_base_directory }}"
      
    - name: Upload certificate
      win_copy:
          src: "{{ letsencrypt_adfs_pfx_src }}"
          dest: "{{ letsencrypt_adfs_pfx_dest }}"

    # - name: Upload PowerShell modules
    #   win_copy:
    #       src: "{{ item }}"
    #       dest: "{{ adfs_base_directory }}\\modules\\{{ item | basename }}" 
    #   loop: "{{ lookup('fileglob','files/adfs/*.ps1', wantlist=True) }}"

    # - name: Upload ADFS Setup powershell
    #   win_template:
    #       src: "{{ adfs_setup_powershell_src }}" 
    #       dest: "{{ adfs_setup_powershell_dest }}"
    #       force: yes


    - name: Install AD-Domain-Services feature
      win_feature:
        name: ADFS-Federation
        include_management_tools: yes
        include_sub_features: yes
        state: present

    #
    # TODO: Run the powershell for seting up adfs

- name: Setup Win Web App
  hosts: "winappvm"
  pre_tasks:
    # - name: Renew dhcp to take advantage of the new dns
    #   win_command: "ipconfig /renew"
      
    - name: Register machine to domain
      win_domain_membership:
        dns_domain_name: "{{ sso_dns_domain }}"
        hostname: "{{ inventory_hostname }}"
        domain_admin_user: "administrator@{{ sso_dns_domain }}"
        domain_admin_password: "{{ password }}"
        state: domain
      register: domain_state

    - name: Reboot if required
      win_reboot:
      when: domain_state.reboot_required

  tasks:
    - name: install-iis
      win_feature:
        name: "Web-Server"
        state: present
        restart: no
        include_sub_features: yes
        include_management_tools: no
      register: install_iis_result

    - name: Reboot if required
      win_reboot:
      when: install_iis_result.reboot_required

    - name: Create working directories
      win_file:
          path: "{{ item }}" 
          state: directory 
      loop:
          - "{{ winapp_site_directory }}"
          - "{{ winapp_dest }}"
    
    - name: Create winapp pool
      win_iis_webapppool:
        name: "{{ winapp_app_pool }}"
        state: started

    - name: winapp IIS site
      win_iis_website:
        name: "{{ winapp_site_name }}"
        state: started
        port: 80
        hostname: "{{ winapp_site_hostname }}"
        application_pool: "{{ winapp_app_pool }}"
        physical_path: "{{ winapp_dest }}"
        parameters: "logfile.directory:{{ winapp_site_directory }}\\logs"
      register: website 

    - name: lala
      debug:
        msg: "{{ website }}"

- name: Setup RHSSO
  hosts: "rhssovm"
  vars:
    ansible_ssh_private_key_file: "files/insecure"
    ansible_user: "{{ username }}"
    ansible_become: true
    ansible_become_pass: "{{ password }}"
    rhsm_activation_key: "developper_sub"
    rhsm_org_id: "{{ lookup('env','RHN_ORG_ID') }}"
    rhsm_repos:
      - name: '*'
        state: absent
      - name: rhel-7-server-rpms
        state: present
      - name: rhel-7-server-extras-rpms
        state: present
      - name: jb-eap-7.1-for-rhel-7-server-rpms
        state: present
      - name: rh-sso-7.2-for-rhel-7-server-rpms
        state: present
      - name: jb-coreservices-1-for-rhel-7-server-rpms 
        state: present

  pre_tasks:
    - name: Subscribe the system to redhat
      include_role:
        name: redhat-subscription

  tasks:
    - name: Install RHSSO
      yum:
        name: "@rh-sso7"
        state: latest

    - name: Install jboss core services
      yum:
        name: "@jbcs-httpd24"

    # service name: jbcs-httpd24-httpd.service